//在一个字符串中寻找最长的子字符串，该字符串是回数（即从左往右和从右往左读的结果是相同的）。该字符串的最大长度为1000
//我的答案：动态规划
//一个回文字符串去掉收尾两个字符后必定还是一个回文串
//时间复杂度O（n2），空间复杂度O(n2)
public String longestPalindrome(String s) {
        int n = s.length();
        int[][] mat = new int[n][n]; 
        //创建一个二维数组，其中第i行第j列是保存第i个字符到第j个字符能否构成回文字符串
        int maxLen = 1; //记录目前最长的回文字符串长度
        int start = 0;  //记录最长的字符串是从哪里开始的
        int temp = 1; //记录当前的回文串的长度
        for(int i = 0; i < n; i++)
        {
            mat[i][i] = 1;
            for(int j = 0; j < i; j++)
            {
                if(i == j+1)
                {
                    if(s.charAt(i) == s.charAt(j))
                    {
                        mat[i][j] = 1;
                        temp = 2;
                        if(temp > maxLen)
                        {
                            start = j;
                            maxLen = temp;
                        }
                    }
                    else
                        mat[i][j] = 0;
                }
                else
                {
                    if(mat[i-1][j+1] == 1 && s.charAt(i) == s.charAt(j))
                    {
                        mat[i][j] = 1;
                        temp = i-j+1;;
                        if(temp > maxLen)
                        {
                            start = j;
                            maxLen = temp;
                        }
                    }
                    else
                        mat[i][j] = 0;
                }
                
            }
        }
        return s.substring(start, start+maxLen);   
    }
    
    //更简洁的代码：动态规划
    //按照搜索的子串的长度进行循环的
    public String longestPalindrome(String s) {
    boolean[][] flag = new boolean[s.length()][s.length()];
    int maxlen = 0,start = 0;
    for(int i = 0;i < s.length(); i++){
        flag[i][i] = true;
        maxlen = 1;
        start = i;
    }
    for(int i = 0;i < s.length()-1; i++)
        if(s.charAt(i)==s.charAt(i+1)){
            flag[i][i+1] = true;
            maxlen = 2;
            start = i;
        }
    for(int len = 3; len<= s.length(); len++)
        for(int i = 0;i < s.length()-len+1; i++){
            int j = i+len-1;
            if(s.charAt(i)==s.charAt(j)&&flag[i+1][j-1]==true){
                flag[i][j] = true;
                maxlen = len;
                start = i;
            }
        }
    return s.substring(start, start+maxlen);
}

//这道题的最优解不是动态规划
//从中间向两边扩张的想法。O（n2）
public String longestPalindrome(String s) {
    int start = 0, end = 0;
    for (int i = 0; i < s.length(); i++) {
        int len1 = expandAroundCenter(s, i, i);
        int len2 = expandAroundCenter(s, i, i + 1);
        int len = Math.max(len1, len2);
        if (len > end - start) {
            start = i - (len - 1) / 2;
            end = i + len / 2;
        }
    }
    return s.substring(start, end + 1);
}

private int expandAroundCenter(String s, int left, int right) {
    int L = left, R = right;
    while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
        L--;
        R++;
    }
    return R - L - 1;
}

//https://articles.leetcode.com/longest-palindromic-substring-part-ii/
//复杂度O(1)
