/*
 You are given coins of different denominations and a total amount of money amount.
 Write a function to compute the fewest number of coins that you need to make up that amount. 
 If that amount of money cannot be made up by any combination of the coins, return -1.

Example 1:
coins = [1, 2, 5], amount = 11
return 3 (11 = 5 + 5 + 1)

Example 2:
coins = [2], amount = 3
return -1. 
*/

//典型的动态规划
class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        if(n == 0)  return -1;
        if(n == 1 && (amount % coins[0] != 0))  return -1;
        if(n == 1 && (amount % coins[0] == 0)) return amount/coins[0];
        if(amount == 0)  return 0;
        
        int[] dp = new int[amount+1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        Arrays.sort(coins);
        dp[0] = 0;
        if(coins[0] == 1) dp[1] = 1;
        else dp[1] = Integer.MAX_VALUE;
        for(int i = 2; i<=amount; i++)
        {
            for(int j = 0; j<coins.length; j++)
            {
                if(i == coins[j]) dp[i] = 1;
                if( i-coins[j] >0 && dp[i - coins[j]] != Integer.MAX_VALUE )
                {
                dp[i] = Math.min(dp[i], dp[i - coins[j]] +1);
                }
            }
        }
        return dp[amount]==Integer.MAX_VALUE?-1:dp[amount];
        
        
    }
}
