/*
Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18]. 
*/


/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    private class IntervalComparator implements Comparator 
        //此处以自定义的比较规则，定义一个实现了Comparator接口的类，类内部要实现一个自定义的compara函数
    {
        public int compare(Object obj1, Object obj2)    
            // 实现接口中的方法  这里的参数类型必须是Object,函数内部再进行强制类型转换
            /*
            int compare(Object o1, Object o2) 返回一个基本类型的整型
            如果要按照升序排序，则o1 小于o2，返回-1（负数），相等返回0，01大于02返回1（正数）
            如果要按照降序排序 则o1 小于o2，返回1（正数），相等返回0，01大于02返回-1（负数）
            */
        {
            Interval a = (Interval) obj1;
            Interval b = (Interval) obj2;
            if(a.start < b.start)
                return -1;
            else if(a.start > b.start)
                return 1;
            else
                return 0;
        }
    }
    
    public List<Interval> merge(List<Interval> intervals) {
        
        Collections.sort(intervals, new IntervalComparator());  
        //先对intervals进行排序，如果要使用已经定义好的比较规则的话，必须传入一个自己定义的比较类的实例
        LinkedList<Interval> list = new LinkedList<Interval>();
        
        for(int i=0; i < intervals.size(); i++)  //对Interval进行遍历 
        {
            Interval tmp = intervals.get(i);
            if(list.isEmpty() || list.getLast().end < tmp.start)
            {
                list.add(tmp);
            }
            else
            {
                list.getLast().end = Math.max(list.getLast().end, tmp.end);
            }
        }
        
        return list;
        
    }
}
