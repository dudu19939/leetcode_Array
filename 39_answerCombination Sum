    public class Solution {  
        public List<List<Integer>> combinationSum(int[] a, int t) {  
            List<List<Integer>> list = new ArrayList<List<Integer>>();  
            Arrays.sort(a);//数组排序  
            //各种特殊情况  
            if(a.length == 0 || a[0] > t)  
                return list;  
      
            int len = 0;  
            boolean isAdd = false;//控制与t相等的数只添加一次  
            for(int i = 0; i< a.length;i++){  
                if(a[i] == t){  
                    if(!isAdd){//如果未添加  
                        List<Integer> al = new ArrayList<Integer>();  
                        al.add(t);  
                        list.add(al);  
                        isAdd = true;//标记已添加  
                    }  
                }else if(a[i] < t){//只要比target小的值，大的值肯定不满足，排除  
                    a[len++] = a[i];//新数组  
                }  
            }  
            //只存在a[0] < target 或 a[0] > target  
            if(a[0] > t)//肯定已没有符合要求的组合  
                return list;  
            //a[0] < target  
              
            for(int i = 0; i < len; i++){//循环搜索符合要求的数字组合  
                int[] b = Arrays.copyOfRange(a, i, len);//不含>=t数据的新数组  
                if(a[i] > t)//如果a[i]，肯定以后的数据已不符合，返回  
                    break;  
                //相等于已经有了一个值a[0]了      
                List<List<Integer>> newList = new ArrayList<List<Integer>>();  
                newList = combinationSum(b,t-a[i]);  
                if(newList.size() > 0){//里面有符合要求的数据  
                    for(int j = 0; j < newList.size();j++){  
                        newList.get(j).add(a[i]);//新返回的各个值添加a[0]  
                        Collections.sort(newList.get(j));//排序  
                        list.add(newList.get(j));//最终添加  
                    }  
                }  
            }  
            return list;  
        }  
    }  
